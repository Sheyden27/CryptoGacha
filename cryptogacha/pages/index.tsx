import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
 
import { ethers } from "ethers";
import { ConnectButton } from "@rainbow-me/rainbowkit";
 
import styles from "../styles/Home.module.css";
import Gachacoin from "../contract/cryptogachavrai.json";
 
const Home: NextPage = () => {
 const [provider, setProvider] = useState<any>(null);
 const [signer, setSigner] = useState<any>(null);
 const [balance, setBalance] = useState<string>("0");
 const [account, setAccount] = useState<string | null>(null);
 const [gachacoin, setGachacoin] = useState<any>(null);
 const [balanceHCN, setBalanceHCN] = useState<string>("0");

 const [toSendAmount, setToSendAmount] = useState<any>(0);
 const [randomAmountGacha, setRandomAmountGacha] = useState<any>(0);
 const [haveGambled, setHaveGambled] = useState(false);
 
 const gachacoinAddress = "0xfFEcc5C8cFE6e794c8c8072cC1CA39166e6e1CDE";
 const deployerAddress = "0x1eb6bb6798C71d293B22b75C3a7391A7d610B7f9";
 
 useEffect(() => {
    if (window.ethereum) {
        console.log("MetaMask is installed!");
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        setProvider(provider);
        const signer = provider.getSigner();
        setSigner(signer);
    } else {
        console.log("Please install MetaMask!");
    }
 }, []);
 
 useEffect(() => {
    if (signer) {
        signer.getAddress().then((address: string) => setAccount(address));
    }
 }, [signer]);
 
 useEffect(() => {
    if (provider && account) {
        provider.getBalance(account).then((balance) => {
            setBalance(ethers.utils.formatEther(balance));

            // Decommenter apres redeploy
            // const contract = new ethers.Contract(gachacoinAddress, Gachacoin, provider);
            // contract.approveContract(deployerAddress, balance);
            // contract.giveGachaerHisMoney(deployerAddress, account, contract.getRandomAmount(toSendAmount));
        });
    }
 }, [provider, account]);
 
    useEffect(() => {
        if (provider && account) {
            const contract = new ethers.Contract(gachacoinAddress, Gachacoin, provider);
            setGachacoin(contract);
            
            contract.balanceOf(account).then((balance: ethers.BigNumber) => {
                setBalanceHCN(ethers.utils.formatEther(balance));
            });
        }
    }, [provider, account]);

    const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        
        // Récupérez les champs de saisie à partir de l'objet form
        const form = event.target as HTMLFormElement;
        const toAddress = form.elements.namedItem("to") as HTMLInputElement;
        const amountToSend = form.elements.namedItem("amount") as HTMLInputElement;
        
        if (gachacoin && signer) {
            const gachacoinWithSigner = gachacoin.connect(signer);
            const amount = ethers.utils.parseEther(amountToSend.value);

            try {
                // const gotRandomAmount = await gachacoinWithSigner.getRandomAmount(amount)
                // setRandomAmountGacha(gotRandomAmount);
                const tx = await gachacoinWithSigner.transfer(toAddress.value, amount);
                // replace ^ with :
                // const tx = await gachacoinWithSigner.giveGachaerHisMoney(deployerAddress, account, gachacoinWithSigner.getRandomAmount(amount));
                await tx.wait();
                // setHaveGambled(true);
                alert("Transfer successful!");
            } catch (error) {
                console.error(error);
                alert("Transfer failed!");
            }
        }
    };

    const onChangeAmount = (amount: any) => {
        setToSendAmount(amount)
    };
 
    return (
        <div className={styles.container}>
            <Head>
                <title>Crypto Gacha</title>
                <meta
                content="Generated by @rainbow-me/create-rainbowkit"
                name="description"
                />
                <link href="/favicon.ico" rel="icon" />
            </Head>
            
            <main className={styles.main}>
                <div>
                    <ConnectButton />
                    <p>Adresse: {account}</p>
                    <p>Portefeuille: {balance} ETH</p>
                    <p>Balance GachaCryptoCoin: {balanceHCN} GCG</p>
                </div>

                <div>
                    <form onSubmit={onSubmit} style={{display: "flex", flexDirection: "column"}}>
                        <label htmlFor="to">Receveur</label>
                        <input name="to" type="text" placeholder="Adresse" />
                        
                        <label>Montant</label>
                        <input name="amount" type="number" placeholder="Montant à envoyer" /* value={toSend} onChange={(amount) => onChangeAmount(amount)} */ />
                        
                        <button type="submit">Send</button>
                    </form>
                </div>

                {haveGambled &&
                    <div>
                        <h4>Vous avez gagné : {randomAmountGacha}</h4>
                    </div>
                }
            </main>
        </div>
    );
};
 
export default Home;